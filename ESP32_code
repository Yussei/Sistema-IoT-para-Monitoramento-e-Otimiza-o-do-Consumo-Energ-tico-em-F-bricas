include <WiFi.h>
#include <PubSubClient.h>

// Configurações da rede Wi-Fi e Adafruit IO
const char* ssid = "Wokwi-GUEST"; // Rede Wi-Fi do simulador
const char* password = "";
const char* mqtt_server = "io.adafruit.com"; // Servidor MQTT do Adafruit IO
const char* mqtt_username = "Seu_Usuario_Adafruit"; // Substitua com seu nome de usuário
const char* mqtt_password = "Sua_Chave_AIO";        // Substitua com sua AIO Key

WiFiClient espClient;
PubSubClient client(espClient);

// Configuração dos pinos
const int sensorPin = 35; // GPIO35 para leitura de corrente
const int relayPin = 25;  // GPIO25 para simular o relé (LED)

// Variáveis de controle
unsigned long lastRelayUpdate = 0;  // Para controlar a atualização do relé
unsigned long lastMqttUpdate = 0;   // Para controlar a publicação no Adafruit
const int relayInterval = 3000;     // Intervalo de 3 segundos para o relé
const int mqttInterval = 5000;      // Intervalo de 5 segundos para o Adafruit
int relayState = LOW;               // Estado do relé (ON/OFF)
int simulatedCurrent = 0;           // Valor simulado da corrente

void setup() {
  Serial.begin(115200);
  
  // Conectar ao Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Conectando ao WiFi...");
  }
  Serial.println("WiFi conectado");

  // Configurar o cliente MQTT
  client.setServer(mqtt_server, 1883);

  // Configurar os pinos
  pinMode(sensorPin, INPUT);
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, relayState);
}

void loop() {
  // Reconectar ao MQTT se necessário
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  unsigned long currentMillis = millis();

  // Atualizar o estado do relé e simular leituras a cada 3 segundos
  if (currentMillis - lastRelayUpdate >= relayInterval) {
    lastRelayUpdate = currentMillis;

    // Alterna o estado do relé
    relayState = !relayState;
    digitalWrite(relayPin, relayState);
    Serial.println(relayState ? "Relé ligado" : "Relé desligado");

    // Simula uma variação nos valores do sensor de corrente
    simulatedCurrent = random(500, 1500); // Valores entre 500 e 1500 (ajuste conforme necessário)
    Serial.println("Simulated Current: " + String(simulatedCurrent) + " mA");
  }

  // Enviar dados ao Adafruit IO a cada 5 segundos
  if (currentMillis - lastMqttUpdate >= mqttInterval) {
    lastMqttUpdate = currentMillis;

    // Publicar o estado do relé
    client.publish(String(mqtt_username + String("/feeds/relay")).c_str(), relayState ? "ON" : "OFF");

    // Publicar o valor simulado do sensor de corrente
    client.publish(String(mqtt_username + String("/feeds/sensor-de-corrente")).c_str(), String(simulatedCurrent).c_str());

    Serial.println("Dados enviados ao Adafruit IO");
  }
}

void reconnectMQTT() {
  while (!client.connected()) {
    Serial.println("Tentando conectar ao MQTT...");
    if (client.connect("ESP32Client", mqtt_username, mqtt_password)) {
      Serial.println("Conectado ao Adafruit IO!");
    } else {
      Serial.print("Falha ao conectar, rc=");
      Serial.println(client.state());
      delay(5000);
    }
  }
}
