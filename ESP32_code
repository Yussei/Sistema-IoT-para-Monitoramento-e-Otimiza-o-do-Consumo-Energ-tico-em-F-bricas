#include <WiFi.h>
#include <PubSubClient.h>
#include "ACS712.h" // Biblioteca para o sensor ACS712

// Configurações da rede Wi-Fi
const char* ssid = "SEU_SSID";     // Insira o SSID da sua rede Wi-Fi
const char* password = "SUA_SENHA"; // Insira a senha da sua rede Wi-Fi

// Configurações do broker MQTT
const char* mqtt_server = "test.mosquitto.org";
WiFiClient espClient;
PubSubClient client(espClient);

// Configurações do sensor ACS712
#define ACS_PIN 8 // Pino analógico onde o ACS712 está conectado
ACS712 sensor(ACS712_30A, ACS_PIN);

void setup() {
  Serial.begin(115200);

  // Conectando ao Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao WiFi...");
  }
  Serial.println("Conectado ao WiFi");

  // Configurando o broker MQTT
  client.setServer(mqtt_server, 1883);

  // Inicializando o sensor ACS712
  sensor.autoMidPoint(); // Ajusta automaticamente o ponto médio (calibração simples)
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Leitura da corrente
  float correnteValor = sensor.getCurrentAC(50); // Frequência da rede em Hz
  Serial.print("Corrente: ");
  Serial.println(correnteValor);

  // Publicar a corrente no MQTT
  char correnteStr[8];
  dtostrf(correnteValor, 6, 2, correnteStr); // Converte float para string
  client.publish("esp32/corrente", correnteStr);

  delay(5000);
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP32Client")) {
      Serial.println("Conectado ao broker MQTT!");
    } else {
      Serial.print("Falha na conexão. Estado: ");
      Serial.println(client.state());
      delay(5000);
    }
  }
}
